namespace VoidCore.AspNet.Security;

/// <summary>
/// A wrapper for CspDirectiveBuilder that adds methods for "src" directives.
/// Adapted from https://www.c-sharpcorner.com/article/using-csp-header-in-asp-net-core-2-0/
/// </summary>
public sealed class CspSourceDirectiveBuilder
{
    private readonly CspDirectiveBuilder _internalBuilder;
    private readonly string _nonce;

    internal CspSourceDirectiveBuilder(CspDirectiveBuilder internalBuilder, string nonce)
    {
        _internalBuilder = internalBuilder;
        _nonce = nonce;
    }

    /// <inheritdoc cref="CspDirectiveBuilder.Allow(string)"/>
    public CspSourceDirectiveBuilder Allow(string source)
    {
        _internalBuilder.Allow(source);
        return this;
    }

    /// <inheritdoc cref="CspDirectiveBuilder.AllowAny()"/>
    public CspSourceDirectiveBuilder AllowAny()
    {
        _internalBuilder.AllowAny();
        return this;
    }

    /// <inheritdoc cref="CspDirectiveBuilder.AllowNone()"/>
    public CspSourceDirectiveBuilder AllowNone()
    {
        _internalBuilder.AllowNone();
        return this;
    }

    /// <inheritdoc cref="CspDirectiveBuilder.AllowSelf()"/>
    public CspSourceDirectiveBuilder AllowSelf()
    {
        _internalBuilder.AllowSelf();
        return this;
    }

    /// <summary>
    /// Allow inline sources defined between tags. Typically unsafe and only recommended for front-ends running in development mode.
    /// </summary>
    public CspSourceDirectiveBuilder AllowUnsafeInline() => Allow("'unsafe-inline'");

    /// <summary>
    /// Allow the use of eval() to create code from strings. Typically unsafe and only recommended for front-ends running in development mode.
    /// </summary>
    public CspSourceDirectiveBuilder AllowUnsafeEval() => Allow("'unsafe-eval'");

    /// <summary>
    /// Use a nonce generated by the server upon every request to whitelist inline sources. This can be used in place of hashes if the content changes often.
    /// The nonce is auto-generated and added to the HttpContext.
    /// Use the extension method <see cref="HttpContextExtensions.GetNonce(Microsoft.AspNetCore.Http.HttpContext)"/> to use the nonce on inline content.
    /// </summary>
    public CspSourceDirectiveBuilder AllowNonce() => AllowNonce(_nonce);

    /// <summary>
    /// Use your own nonce to whitelist inline sources. This can be used in place of hashes if the content changes often.
    /// </summary>
    /// <param name="base64Value">The base 64 nonce value used to identify the source.</param>
    public CspSourceDirectiveBuilder AllowNonce(string base64Value) => Allow($"'nonce-{base64Value}'");

    /// <summary>
    /// Use a sha256, sha384, sha512 hash to identify scripts or styles.
    /// </summary>
    /// <param name="algorithm">The string name of the algorithm used to derive the hash.</param>
    /// <param name="base64Value">The base 64 value of the hash.</param>
    public CspSourceDirectiveBuilder AllowHash(string algorithm, string base64Value) => Allow($"'{algorithm}-{base64Value}'");
}
